// Exerc√≠cio 1:
// Altere o tipo das vari√°veis (var) para let ou const para que respeitem o escopo em que foram declaradas.
// üöÄ Modifique a vari√°vel para que respeite o escopo onde est√° sendo declarada. Lembre-se: para que a vari√°vel respeite o escopo, ela n√£o deve ser acess√≠vel fora do escopo em que esteja sendo declarada.
// Copie o c√≥digo abaixo e rode-o para verificar sua sa√≠da:

// function imprimeIdade() {
//   for (var idade = 30; idade <= 40; idade += 1) {
//     console.log('Idade dentro do for:', idade)
//   }
//   console.log('Idade fora do for:', idade) // retire essa linha ao implementar o tipo de vari√°vel correta.
// }
// imprimeIdade()

function imprimeIdade() {
  for (let idade = 30; idade <= 40; idade += 1) {
    console.log('Idade dentro do for:', idade)
  }
}
imprimeIdade();

// Exerc√≠cio 2:
// üöÄ Altere o valor das propriedades do objeto, para que respeite as caracter√≠sticas da vari√°vel do tipo const;
// Copie o c√≥digo abaixo e rode-o para verificar sua sa√≠da:

//   // Executando esse c√≥digo iremos receber um erro `TypeError: Assignment to constant variable.`
//   const pessoa = {
//     nome: 'Henri',
//     idade: 20
//   }
//   pessoa = {
//     nome: 'Luna',
//     idade: 19
//   } // Altere essa estrutura para corrigir o erro.
//   console.log('Nome:', pessoa.nome);
//   console.log('Idade:', pessoa.idade);

  const pessoa = {
    nome: 'Henri',
    idade: 20
  }
  pessoa.nome = 'luna';
  pessoa.idade = 19;
  console.log('Nome:', pessoa.nome);
  console.log('Idade:', pessoa.idade);

// Exerc√≠cio 3:
// üöÄ Modifique a vari√°vel para que n√£o ocorra Erro;
// Copie o c√≥digo abaixo e rode-o para verificar sua sa√≠da:

//   const favoriteFood = 'Lasanha';
//   favoriteFood = 'Hamburguer';
//   console.log(favoriteFood);

let favoriteFood = 'Lasanha';
favoriteFood = 'Hamburguer';
console.log(favoriteFood);

// Exerc√≠cio 4:
// üöÄ Modifique as concatena√ß√µes para template literals.
// Copie o c√≥digo abaixo:

//   const name = 'Adriana';
//   const lastName = 'Soares';
//   console.log('Ol√°' + ',' + name + ' ' + lastName + '!');
//   function soma(a,b) {
//     let resultado = a + b;
//     return resultado;
//   }
//   let a = 3;
//   let b = 5;
//   console.log('O resultado da soma de ' + a + ' + ' + b + ' √©: ' + soma(a,b));

const name = 'Adriana';
const lastName = 'Soares';
console.log(`Ol√°, ${name} ${lastName}!`);

function soma(a,b) {
  let resultado = a + b;
  return resultado;
}
let a = 3;
let b = 5;
console.log(`O resultado da soma de ${a} + ${b} √©: ${soma(a,b)}`)

// Exerc√ßio 5:
// üöÄ Modifique a estrutura das fun√ß√µes a seguir para que elas sejam arrow functions;
// üöÄ Transforme a fun√ß√£o numeroAleatorio em uma arrow function;
// Copie o c√≥digo abaixo:

//   function numeroAleatorio() {
//     return Math.random()
//   }
//   console.log(numeroAleatorio());

const numeroAleatorio = () => {
  return Math.random()
}
console.log(numeroAleatorio());

// Exercicio 6:
// üöÄ Transforme a fun√ß√£o hello em uma arrow function;
// Copie o c√≥digo abaixo:

//   function hello(nome) {
//     return `Ol√°, ${nome}!`
//   }
//   let nome = 'Ivan';
//   console.log(hello(nome));

const hello = (nome) => {
      return `Ol√°, ${nome}!`
    }
let nome = 'Ivan';
console.log(hello(nome));

// Exerc√≠cio 7:
// üöÄ Transforme a fun√ß√£o nomeCompleto em uma arrow function;
// Copie o c√≥digo abaixo:

//   function nomeCompleto(nome, sobrenome) {
//     return `${nome} ${sobrenome}`
//   }
//   let nome = 'Ivan';
//   let sobrenome = 'Pires';
//   console.log(nomeCompleto(nome, sobrenome));

const nomeCompleto = (nome, sobrenome) => {
  return `${nome} ${sobrenome}`
}
let nome = 'Ivan';
let sobrenome = 'Pires';
console.log(nomeCompleto(nome, sobrenome));

// Exerc√≠cio 8:
// üöÄ Altere a express√£o if/else utilizando ternary operator;
// Copie o c√≥digo abaixo:

//   let speed = 90;
//   const speedCar = (speed) => {
//     if (speed >= 120) {
//       return `Voc√™ ultrapassou o limite de velocidade`;
//     } else {
//       return `Voc√™ est√° na velocidade permitida`;
//     }
//   };
//   console.log(speedCar(speed));

let speed = 90;
const speedCar = (speed) => {
  return (
    speed >= 120
    ? `Voc√™ ultrapassou o limite de velocidade`
    : `Voc√™ est√° na velocidade permitida`
  )
};
console.log(speedCar(speed));

// Exerc√≠cio 9:
// üöÄ Crie uma fun√ß√£o que ligue e desligue um motor de um carro.
// Crie uma vari√°vel para armazenar o valor de status do seu motor (lembre-se de armazenar o tipo de vari√°vel da forma correta);
// Crie a fun√ß√£o ligarDesligar utilizando arrow functions. Ela n√£o receber√° nenhum par√¢metro;
// Crie a l√≥gica para ligar e desligar o motor (a l√≥gica dever√° utilizar uma condicional para ligar e desligar o motor);
// Imprima no terminal ‚ÄúO motor est√° ligado‚Äú e ‚ÄúO motor est√° desligado‚Äú (lembre-se de utilizar o template literals nesse momento).
let motorLigado = false;

const ligarDesligarMotor = () => {
  if (motorLigado === false) {
    motorLigado = true;
    console.log(`O motor est√° ligado`)
  } else {
    motorLigado = false
    console.log(`O motor est√° desligado`)
  }
}

ligarDesligarMotor();
ligarDesligarMotor();
ligarDesligarMotor();
ligarDesligarMotor();

// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando ternary operator.

let motorLigado = false;

const ligarDesligarMotor = () => {
  motorLigado ? motorLigado = false : motorLigado = true;
  motorLigado ? console.log(`O motor est√° ligado`) : console.log(`O motor est√° desligado`)
}

ligarDesligarMotor();
ligarDesligarMotor();
ligarDesligarMotor();
ligarDesligarMotor();

// Exerc√≠cio 10:
// üöÄ Crie uma fun√ß√£o que calcule a √°rea de um c√≠rculo.
// Na matem√°tica, a f√≥rmula para calcular a √°rea de um c√≠rculo √©: √°rea = PI vezes o raio elevado ao quadrado.
// Com base nessa informa√ß√£o:
// Crie a fun√ß√£o circleArea, que recebe o valor do raio como par√¢metro, utilizando arrow functions;
// Crie uma vari√°vel para armazenar o valor de PI (lembre-se de armazenar o tipo de vari√°vel da forma correta);
// Crie a l√≥gica para retornar a √°rea do c√≠rculo;
// Imprima no terminal ‚ÄúEssa √© a √°rea do c√≠rculo: resultado da fun√ß√£o‚Äú (lembre-se de utilizar o template literals nesse momento).
// Exemplo de retorno:
// Par√¢metro: 3
// Retorno: Essa √© a √°rea do c√≠rculo: 28.259999999999998
// Par√¢metro: 5
// Retorno: Essa √© a √°rea do c√≠rculo: 78.5

const circleArea = (r) => {
  const pi = 3.14
  return pi * (r ** 2);
};

console.log(`Essa √© a √°rea do circulo ${circleArea(5)}`);

// Exerc√≠cio 11:
// üöÄ Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra da frase.
// Exemplo:
//   longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu') // retorna 'aconteceu'

// De olho na dica üëÄ: Nesse exerc√≠cio, ser√° necess√°rio utilizar os conhecimentos sobre array, m√©todo split e loop for/of.

const phrase = 'Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu';

const longestWord = (phrase) => {
  const words = phrase.split(" ");
  let longestWord = words[0];
  for (let index = 1; index < words.length; index += 1) {
    if(longestWord.length < words[index].length) {
      longestWord = words[index]
    }
  }
  return longestWord;
}

console.log(longestWord(phrase));

// B√¥nus (opcional): Tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort().

// EXERC√çCIO B√îNUS:
// Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
// N√£o se esque√ßa de usar template literals

// Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra ‚Äòx‚Äô em uma frase.
// O nome da fun√ß√£o dever√° ser substituaX;
// A fun√ß√£o dever√° receber um nome por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
// A fun√ß√£o dever√° retornar uma nova frase em que o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
// Exemplo:
// Par√¢metro: ‚ÄòBebeto‚Äô
// Retorno: ‚ÄòTryber Bebeto aqui!‚Äô
// Spoiler: O m√©todo split() pode ser utilizado de diferentes maneiras, como para separar as palavras de um texto.

// Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
// O nome da fun√ß√£o dever√° ser minhasSkills;
// A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 - substituaX por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
// A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
// Crie uma var√°vel do tipo let e concatene o valor retornado da Fun√ß√£o 1 - substituaX (utilize template literals), a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas tr√™s principais habilidades s√£o:
// JavaScript
// HTML
// CSS












